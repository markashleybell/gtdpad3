@page
@using Microsoft.AspNetCore.Mvc.ApplicationModels
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Routing
@inject EndpointDataSource EndpointsDataSource

@{
    ViewBag.Title = "Route List";

    var endpoints = EndpointsDataSource.Endpoints.ToList();

    var groups = endpoints
        .Where(e => e is RouteEndpoint)
        .Select(e => e as RouteEndpoint)
        .GroupBy(e => (e.Order, e.RoutePattern.RawText))
        .OrderBy(e => e.Key.RawText);

    // Set true to see full data list
    var showAll = false;
}


<table class="table">
    <thead class="thead-dark">
        <tr>
            <th scope="col">Route Name</th>
            <th scope="col">Route Pattern</th>
            <th scope="col">Matched Endpoints</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var group in groups)
        {
            var (order, routePattern) = group.Key;

            var route = group.FirstOrDefault(g => g.DisplayName.StartsWith("route", StringComparison.OrdinalIgnoreCase));

            var rmd = route?.Metadata?.FirstOrDefault(m => m is RouteNameMetadata) as RouteNameMetadata;

            <tr>
                <td>@rmd?.RouteName</td>
                <td><code>@routePattern</code></td>
                <td>
                        @foreach (var endpoint in group.Where(g => !g.DisplayName.StartsWith("route", StringComparison.OrdinalIgnoreCase)).OrderBy(e => e.DisplayName))
                        {
                            var name = endpoint.DisplayName.Replace("DashTasks.Web.Controllers.", "")
                                .Replace(" (DashTasks.Web)", "");

                            var md = endpoint.Metadata
                                .Where(m => m is HttpMethodMetadata)
                                .Select(c => c as HttpMethodMetadata);

                            var methods = md.Any()
                                ? string.Join(", ", md.Select(m => string.Join("], [", m.HttpMethods.Select(h => h))))
                                : default;

                            <div>@name [@(methods ?? "GET")]</div>
                        }
                </td>
            </tr>
        }
    </tbody>
</table>

@if (showAll)
{

    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Order</th>
                <th scope="col">Display Name</th>
                <th scope="col">Route Pattern</th>
                <th scope="col">Metadata</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var endpoint in endpoints)
            {
                var routeEndpoint = endpoint as RouteEndpoint;
                <tr>
                    <td>@routeEndpoint?.Order</td>
                    <td>@endpoint.DisplayName</td>
                    <td>@routeEndpoint?.RoutePattern.RawText</td>
                    <td>
                        <ul>
                            @foreach (var md in endpoint.Metadata)
                            {
                                switch (md)
                                {
                                    case PageRouteMetadata prm:
                                        <li>
                                            <p>@nameof(PageRouteMetadata)</p>
                                            <ul>
                                                <li>Page Route: @prm.PageRoute</li>
                                                <li>Route Template: @prm.RouteTemplate</li>
                                            </ul>
                                        </li>
                                        break;
                                    case PageActionDescriptor pad:
                                        <li>
                                            <p>@nameof(PageActionDescriptor)</p>
                                            <ul>
                                                <li>Id: @pad.Id</li>
                                                <li>Area: @pad.AreaName</li>
                                                <li>Display Name: @pad.DisplayName</li>
                                                <li>View Engine Path: @pad.ViewEnginePath</li>
                                                <li>Relative Path: @pad.RelativePath</li>
                                            </ul>
                                        </li>
                                        break;
                                    case RouteNameMetadata rnm:
                                        <li>
                                            Route Name Metadata: @rnm.RouteName
                                        </li>
                                        break;
                                    case SuppressLinkGenerationMetadata slg:
                                        <li>
                                            suppress link: @slg.SuppressLinkGeneration;
                                        </li>
                                        break;
                                    default:
                                        <li>@md.GetType().Name: @md.ToString()</li>
                                        break;
                                }
                            }
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
